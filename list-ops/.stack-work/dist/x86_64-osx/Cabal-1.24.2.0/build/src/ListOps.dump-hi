
==================== FINAL INTERFACE ====================
2017-09-27 09:21:47.612401 UTC

interface list-ops-0.1.0.2-JKI50BvNEqOLJomxL6kjuW:ListOps 8002
  interface hash: c9fb09008a3f26dbf12d5895e3ffe311
  ABI hash: 2b6ef23916b6c38231ffbccf65dedbf0
  export-list hash: 5fbf491f4d0fe2f40b1f052b78aa81fa
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  ListOps.++
  ListOps.concat
  ListOps.filter
  ListOps.foldl'
  ListOps.foldr
  ListOps.length
  ListOps.map
  ListOps.reverse
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
5c1c8ebadf850cfa3c3f70b457dcb04d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ListOps.$trModule2
                   ListOps.$trModule1) -}
dc7e094d49b5afa54d4c94cdc8fe01ba
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ListOps"#) -}
3140a73223d4e61ce4a0fa5e96eec787
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "list-ops-0.1.0.2-JKI50BvNEqOLJomxL6kjuW"#) -}
9841760dc500fab7da59dc09b0f1f03b
  (++) :: [a] -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (ds :: [a]) (ys :: [a]) ->
                 case ds of wild {
                   [] -> ys
                   : ipv ipv1
                   -> ListOps.foldr @ a @ [a] (GHC.Types.: @ a) ys wild }) -}
660a6351a98fcbce9f6069916a1a038c
  concat :: [[a]] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: [[a]]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ a
                   : ipv ipv1
                   -> ListOps.foldr
                        @ [a]
                        @ [a]
                        (ListOps.++ @ a)
                        (GHC.Types.[] @ a)
                        wild }) -}
72c37e38238c68450c474ad360960501
  filter :: (a -> GHC.Types.Bool) -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a (p :: a -> GHC.Types.Bool) (ds :: [a]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ a
                   : ipv ipv1
                   -> ListOps.foldr
                        @ a
                        @ [a]
                        (\ (a1 :: a) (acc :: [a])[OneShot] ->
                         case p a1 of wild1 {
                           GHC.Types.False -> acc GHC.Types.True -> GHC.Types.: @ a a1 acc })
                        (GHC.Types.[] @ a)
                        wild }) -}
d3b8a6aad9940317bdb8e5201ea21f84
  foldl' :: (b -> a -> b) -> b -> [a] -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><S,1*U><S,1*U> -}
97dcfea4b9d07c98bdce792d5db19f83
  foldr :: (a -> b -> b) -> b -> [a] -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,1*U><S,1*U> -}
16a3b63e946d3d9c0f73d61cfea7959c
  length :: [a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 ListOps.foldl'
                   @ GHC.Types.Int
                   @ a
                   (ListOps.length2 @ a)
                   ListOps.length1
                   xs) -}
bc49c91fdc8d4132062e8ffb5f5b0a7c
  length1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
6eb1995a7a8d1f9b0869dfd942eef734
  length2 :: GHC.Types.Int -> a -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,A>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (a1 :: GHC.Types.Int) (b :: a) ->
                 case a1 of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.+# x 1#) }) -}
f404c681815b0f934a5e346a38619f9d
  map :: (a -> b) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a @ b (f :: a -> b) (ds :: [a]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ b
                   : ipv ipv1
                   -> letrec {
                        go :: [a] -> [b] {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds1 :: [a]) ->
                          case ds1 of wild1 {
                            [] -> GHC.Types.[] @ b : y ys -> GHC.Types.: @ b (f y) (go ys) }
                      } in
                      go wild }) -}
1b9d03498a7697dbd2986ddbb08f9bde
  reverse :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 ListOps.foldl'
                   @ [a]
                   @ a
                   (ListOps.reverse1 @ a)
                   (GHC.Types.[] @ a)) -}
c3c38da336e809827dfd1f1048147731
  reverse1 :: [a] -> a -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (a1 :: [a]) (b :: a) -> GHC.Types.: @ a b a1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

